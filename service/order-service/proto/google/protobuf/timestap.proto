syntax = "proto3";

package google.protobuf;

option go_package = "google.golang.org/protobuf/types/known/timestamppb";

// A Timestamp represents a point in time independent of any time zone
// or calendar, represented as seconds and fractions of seconds at
// nanosecond resolution in UTC Epoch time. It is encoded using the
// Proleptic Gregorian Calendar which extends the Gregorian calendar
// backwards to year one. It is encoded assuming all minutes are 60
// seconds long, i.e. leap seconds are "smeared" so that no leap second
// table is needed for interpretation. Range is from
// 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.
//
// # Examples
//
// Example 1: Compute Timestamp from POSIX `time()`.
//     Timestamp timestamp;
//     timestamp.set_seconds(time(NULL));
//     timestamp.set_nanos(0);
//
// Example 2: Compute Timestamp from POSIX `gettimeofday()`.
//     struct timeval tv;
//     gettimeofday(&tv, NULL);
//
//     Timestamp timestamp;
//     timestamp.set_seconds(tv.tv_sec);
//     timestamp.set_nanos(tv.tv_usec * 1000);
//
// Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.
//     FILETIME ft;
//     GetSystemTimeAsFileTime(&ft);
//     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;
//
//     // convert from 100-nanosecond intervals since January 1, 1601 (UTC)
//     // to seconds and nanos since January 1, 1970 (UTC)
//     Timestamp timestamp;
//     timestamp.set_seconds((INT64)(ticks / 10000000 - 11644473600LL));
//     timestamp.set_nanos((INT32)(ticks % 10000000 * 100));
//
// Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.
//     long millis = System.currentTimeMillis();
//
//     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
//         .setNanos((int) ((millis % 1000) * 1000000)).build();
//
// Example 5: Compute Timestamp from current time in Python.
//     timestamp = Timestamp()
//     timestamp.GetCurrentTime()
//
// # JSON Mapping
//
// In JSON format, the Timestamp type is encoded as a string in the
// RFC 3339 format. That is, the format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"
// where {year} is always expressed using four digits while {month}, {day},
// {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional
// seconds, which can go up to 9 digits (i.e. up to nanosecond resolution), are
// optional. The uppercase letter T is used to separate date and time. The
// suffix "Z" means "UTC" (in other words, it is equivalent to "+00:00" in
// RFC 3339).
//
// Examples:
//     2017-01-15T01:30:15.01Z    // Example Timestamp
//     2017-01-15T01:30:15.123456789Z    // Higher precision

message Timestamp {
  int64 seconds = 1;
  int32 nanos = 2;
}
